#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from pathlib import Path

import numpy as np

from tqdm import tqdm


import torch
import torch.nn.functional as F
from torch.autograd import Variable
import torch.utils.data as data


from extractorch.dataset import ImageFolderDataset
from extractorch.resnet import ResNet

# This script uses the PyTorch's pre-trained ResNet-50 CNN to extract
#   res4f_relu convolutional features of size 1024x14x14
#   avgpool features of size 2048D
# We reproduced ImageNet val set Top1/Top5 accuracy of 76.1/92.8 %
# as reported in the following web page before extracting the features:
#   http://pytorch.org/docs/master/torchvision/models.html
#
# We save the final files as 16-bit floating point tensors to reduce
# the size by 2x. We confirmed that this does not affect the above accuracy.
#
# Organization of the image folder:
#  In order to extract features from an arbitrary set of images,
#  you need to create a folder with a file called `index.txt` in it that
#  lists the filenames of the raw images in an ordered way.
#    -f /path/to/images/train  --> train folder contains 29K images
#                                  and an index.txt with 29K lines.
#


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='extractor')
    parser.add_argument('-f', '--folder', type=str, required=True,
                        help='Folder to image files i.e. /images/train')
    parser.add_argument('-b', '--batch-size', type=int, default=256,
                        help='Batch size for forward pass.')
    parser.add_argument('-c', '--central-fraction', type=float, default=1.0,
                        help='Central fraction. If < 1, focuses on the middle.')
    parser.add_argument('-w', '--width', type=int, default=224,
                        help='Final image width and height.')
    parser.add_argument('-m', '--model', type=str, default='resnet50',
                        help='resnet[18/34/50/152]')
    parser.add_argument('-n', '--l2norm', action='store_true',
                        help='Apply l2 normalization.')
    parser.add_argument('-l', '--layer', default='res4f_relu',
                        help='res4f_relu/res5c_relu/avgpool/prob')
    parser.add_argument('-d', '--device', default='cpu',
                        help='cpu or cuda')

    # Parse arguments
    args = parser.parse_args()
    root = Path(args.folder)
    split = root.name
    bs = args.batch_size

    # Disable gradient tracking
    torch.set_grad_enabled(False)

    resize_width = int(args.width / args.central_fraction)
    print('Resize shortest side to {} then center crop {}x{}'.format(
        resize_width, args.width, args.width))

    # Create dataset
    dataset = ImageFolderDataset(
        root.parent, split, resize=resize_width, crop=args.width)
    print('Root folder: {} (split: {}) ({} images)'.format(
        root, split, len(dataset)))
    n_batches = int(np.ceil(len(dataset) / bs))

    # Create data loader
    loader = data.DataLoader(dataset, batch_size=args.batch_size)

    # Create model
    model = ResNet(args.model, args.layer)

    # Create placeholder
    feats = np.zeros((len(dataset), *model.output_shape(args.width, args.width)))

    model.set_device(args.device)

    ######################
    # Main extraction loop
    ######################
    for bidx, batch in enumerate(tqdm(loader, unit='batch', ncols=70)):
        x = torch.tensor(batch, device=args.device, dtype=torch.float32)
        out = model(x)

        if args.layer != 'prob' and args.l2norm:
            if out.dim() == 2:
                out = F.normalize(out, dim=-1)
            else:
                n, c, h, w = out.shape
                out = F.normalize(out.view(n, c, -1), dim=1).view(n, c, h, w)

        feats[bidx * bs: (bidx + 1) * bs] = out.data.to('cpu')

    ###############
    # Save the file
    ###############
    output = "{}-{}-{}-r{}-c{}".format(
        split, args.model, args.layer, resize_width, args.width)
    if args.layer != 'prob' and args.l2norm:
        output += '-l2norm'
    np.save(output, feats.astype('float16'))
